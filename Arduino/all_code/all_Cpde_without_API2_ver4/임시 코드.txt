//센서값 Json화
#include <ArduinoJson.h>
#include <ezTask.h>
//Wifi----------------------------------------------------------------
#include <ESP8266WiFi.h>
const char* ssid = "AndroidHotspot2383";
const char* password = "11111111";
WiFiServer server(80);

int window_state = 0; //0 자동 1 수동

//빗물----------------------------------------------------------------
int Rain_Sensor = D7;


//미세----------------------------------------------------------------
#include <SoftwareSerial.h>
SoftwareSerial mySerial(D6, D5); //매개변수1 : TX, 매개변수2 : RX
#define START_1 0x42
#define START_2 0x4d
#define DATA_LENGTH_H        0
#define DATA_LENGTH_L        1
#define PM1_0_ATMOSPHERE_H   8
#define PM1_0_ATMOSPHERE_L   9
#define PM2_5_ATMOSPHERE_H   10
#define PM2_5_ATMOSPHERE_L   11
#define PM10_ATMOSPHERE_H    12
#define PM10_ATMOSPHERE_L    13
#define PM2_5_PARTICLE_H   16
#define PM2_5_PARTICLE_L   17
#define VERSION              26
#define ERROR_CODE           27
#define CHECKSUM             29
byte bytCount1 = 0;
byte bytCount2 = 0;
unsigned char chrRecv;
unsigned char chrData[30];
unsigned int GetPM_Data(unsigned char chrSrc[], byte bytHigh, byte bytLow)  {
  return (chrSrc[bytHigh] << 8) + chrSrc[bytLow];
}

//온습도----------------------------------------------------------------
#include "DHT.h"
#define DHTPIN D3
#define DHTTYPE DHT11 // 온도 센서의 종류에 따라 DHT11 이나 DHT22
DHT dht(DHTPIN, DHTTYPE);

//강우량----------------------------------------------------------------
const int sensorMin = 0;     // sensor minimum
const int sensorMax = 1024;  // sensor maximum

//센서값 관리 0: 미세먼지1.0, 1: 미세먼지2.5, 2: 미세먼지10.0, 3: 온도, 4: 습도, 5. 빗물, 6. 풍속
float ALL_Sensor_Value[7];

//JSON----------------------------------------------------------------
int count = 0;

//모터-----------------------------------------------------------------
int butten_open = D8;
int butten_close = D9;
int motorIA = D10;
int motorIB = D11;
int Limit_butten1 = D12;
int Limit_butten2 = D13;
int control_butten = D4;


//----------------------------------------SETUP()----------------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------
void setup() {
  Serial.begin(115200);

  //미세----------------------------------------------------------------
  mySerial.begin(9600);

  //온습도----------------------------------------------------------------
  dht.begin();

  //Wifi----------------------------------------------------------------
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  server.begin();
  // Connecting to WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println(ssid);
  Serial.print("IP address: ");
  // Printing the ESP IP address
  Serial.println(WiFi.localIP());

  //빗물 디지털 모드 ----------------------------------------------------------------
  pinMode(Rain_Sensor, INPUT);

  //모터 핀 모드
  pinMode(motorIA, OUTPUT);
  pinMode(motorIB, OUTPUT);
  pinMode(butten_open, INPUT_PULLUP);
  pinMode(butten_close, INPUT_PULLUP);
  pinMode(Limit_butten1, INPUT_PULLUP);
  pinMode(Limit_butten2, INPUT_PULLUP);
  pinMode(control_butten, INPUT_PULLUP);
}

//와이파이----------------------------------------------------------------
void connect_Wifi() {
  WiFiClient client = server.available();
  if (client) {
    StaticJsonBuffer<400> jsonBuffer;
    JsonObject& root = jsonBuffer.createObject();
    JsonObject& response = root.createNestedObject("response");
    JsonObject& body = response.createNestedObject("body");
    JsonObject& item = body.createNestedObject("item");
    JsonObject& items = item.createNestedObject("items");
    items["Air_Pollution_1.0"] = ALL_Sensor_Value[0];
    items["Air_Pollution_2.5"] = ALL_Sensor_Value[1];
    items["Air_Pollution_10.0"] = ALL_Sensor_Value[2];
    items["Wind_Speed"] = ALL_Sensor_Value[6];
    items["Temperature"] = ALL_Sensor_Value[3];
    items["Humidity"] = ALL_Sensor_Value[4];
    items["Rain_Check"] = ALL_Sensor_Value[5];


    root.printTo(Serial);
    Serial.println();
    Serial.println("New client");
    // bolean to locate when the http request ends
    boolean blank_line = true;
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        if (c == '\n' && blank_line) {
          client.println("HTTP/1.1 200 OK");
          client.println("Content-Type: text/html");
          client.println("Connection: close");
          client.println();
          client.println("<!DOCTYPE HTML>");
          client.println("<html>");
          client.println("<head></head><body>");
          root.printTo(client); //테스트 완료 : 문제 없음
          client.println("</body></html>");

          break;
        }
        if (c == '\n') {
          // when starts reading a new line
          blank_line = true;
        }
        else if (c != '\r') {
          // when finds a character on the current line
          blank_line = false;
        }
      }
    }
    delay(1000);
    client.stop();
    Serial.println("Client disconnected.");
  }
}

//풍속 주파수---------------------------------------------------------------------------------
void wind_freq() {
  float a = 0;
  a = analogRead(0);

  Serial.print("A0 : ");
  Serial.println(a); 
  float b = 0;
  b = a / 1023.0 * 5.0;     //아두이노는 10bit ADC므로 0~1023로 표시되므로 0~5범위로 매핑합니다.

  Serial.print("\t ,b : ");
  Serial.println(b);

  float c = b * 6;
  ALL_Sensor_Value[6] = c;
  Serial.print(c);
  Serial.println("m/s");
  //delay(100);
}

//온습도--------------------------------------------------------------------------------------
void F_dht() {
  int temp = dht.readTemperature();
  int humi = dht.readHumidity();
  ALL_Sensor_Value[3] = temp;
  ALL_Sensor_Value[4] = humi;
  Serial.println(ALL_Sensor_Value[3]);
  Serial.println(ALL_Sensor_Value[4]);
}

//미세먼지--------------------------------------------------------------------------------------
void air_pol() {
  if (mySerial.available())   {
    for (int i = 0; i < 32; i++)     {
      chrRecv = mySerial.read();
      if (chrRecv == START_2 ) {
        bytCount1 = 2;
        break;
      }
    }
    if (bytCount1 == 2)
    {
      bytCount1 = 0;
      for (int i = 0; i < 30; i++) {
        chrData[i] = mySerial.read();
      }
      if ((unsigned int) chrData[ERROR_CODE] == 0) {
        ALL_Sensor_Value[0] = GetPM_Data(chrData, PM1_0_ATMOSPHERE_H, PM1_0_ATMOSPHERE_L);
        ALL_Sensor_Value[1] = GetPM_Data(chrData, PM2_5_ATMOSPHERE_H, PM2_5_ATMOSPHERE_L);
        ALL_Sensor_Value[2] = GetPM_Data(chrData, PM10_ATMOSPHERE_H, PM10_ATMOSPHERE_L);
      }
      else {
        Serial.println("PMS7003  ERROR");
      }
    }
  }
  else {
    Serial.println("PMS7003 NOT available");
  }
}

//빗물센서--------------------------------------------------------------------------------------
void rain() {
  ALL_Sensor_Value[5] = digitalRead(Rain_Sensor);
  Serial.println(ALL_Sensor_Value[5]);
}


//----------------------------------------------LOOP()-----------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------
void loop() {
  //Run Wifi-------------------------------------------------------------
  wind_freq();
  F_dht();
  //air_pol();
  rain();
  delay(1000);
  connect_Wifi();

  //자동화 시작
  if (digitalRead(control_butten) == 0) {
    window_state = 0;
    if (ALL_Sensor_Value[1] >= 35 || ALL_Sensor_Value[6] >= 14 || digitalRead(Rain_Sensor) == 0) {
      digitalWrite(motorIA, HIGH);
      digitalWrite(motorIB, LOW);
      if (digitalRead(Limit_butten1) == 0) {
        digitalWrite(motorIA, LOW);
        digitalWrite(motorIB, LOW);
      }
      else if (ALL_Sensor_Value[3] <= 16) {
        digitalWrite(motorIA, HIGH);
        digitalWrite(motorIB, LOW);
        if (digitalRead(Limit_butten1) == 0) {
          digitalWrite(motorIA, LOW);
          digitalWrite(motorIB, LOW);
        }
      }
      else {
        digitalWrite(motorIA, LOW);
        digitalWrite(motorIB, HIGH);
        if (digitalRead(Limit_butten2) == 0) {
          digitalWrite(motorIA, LOW);
          digitalWrite(motorIB, LOW);
        }
      }
    }
  }

  //수동화 시작
  if (digitalRead(butten_close) == 0)
  {
    window_state = 1;
    digitalWrite(motorIA, HIGH);
    digitalWrite(motorIB, LOW);
    if (digitalRead(Limit_butten1) == 0)
    {
      digitalWrite(motorIA, LOW);
      digitalWrite(motorIB, LOW);
      delay(5000);
    }
  }
  else if (digitalRead(butten_open) == 0)
  {
    window_state = 1;
    digitalWrite(motorIA, LOW);
    digitalWrite(motorIB, HIGH);
    if (digitalRead(Limit_butten2) == 0)
    {
      digitalWrite(motorIA, LOW);
      digitalWrite(motorIB, LOW);
      delay(5000);
    }
  }
  else
  {
    digitalWrite(motorIA, LOW);
    digitalWrite(motorIB, LOW);
  }
}